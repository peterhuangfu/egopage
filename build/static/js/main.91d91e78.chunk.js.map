{"version":3,"sources":["components/topbar.js","components/section.js","components/footer.js","components/intro.js","App.js","serviceWorker.js","index.js"],"names":["Topbar","props","className","Component","Section","Footer","Intro","window","scrollTo","App","url","location","origin","includes","split","Boolean","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAwBeA,G,kBApBb,WAAYC,GAAQ,uE,sEAKlB,OACE,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,UAAf,YACA,yBAAKA,UAAU,QAAO,kDACtB,yBAAKA,UAAU,UAAf,gCAEF,yBAAKA,UAAU,gBACb,4C,GAdWC,cCcNC,G,kBAbb,WAAYH,GAAQ,uE,sEAKlB,OACE,iCACE,sD,GARcE,cCmBPE,G,kBAlBb,WAAYJ,GAAQ,uE,sEAKlB,OACE,6BACE,8BAEA,sE,GAVaE,cCuBNG,G,kBAnBb,WAAYL,GAAQ,uE,iFAKlBM,OAAOC,SAAS,EAAG,K,+BAInB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAdYL,cCiBLM,E,YAlBb,WAAYR,GAAQ,IAAD,sBACjB,8CACA,IAAMS,EAAMH,OAAOI,SAASC,OAFX,OAIZF,EAAIG,SAAS,cAAiBH,EAAIG,SAAS,WAC9CN,OAAOI,SAAP,gBAA2BD,EAAII,MAAM,KAAK,KAL3B,E,sEAUjB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,W,GAbUX,a,gBCQEY,QACW,cAA7BR,OAAOI,SAASK,UAEe,UAA7BT,OAAOI,SAASK,UAEhBT,OAAOI,SAASK,SAASC,MACvB,2DCXN,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,WAERC,UAAW,CAETD,KAAM,cAKZE,IAASC,OACP,kBAAC,IAAD,CAAkBP,MAAOA,GACvB,kBAAC,EAAD,OACmBQ,SAASC,eAAe,SD4GzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91d91e78.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../css/topbar.css';\n\nclass Topbar extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"top-picture-container\">\n        <div className=\"intro\">\n          <div className=\"intro1\">Hey, I'm</div>\n          <div className=\"name\"><b>Huang Fu Li-Hsiang</b></div>\n          <div className=\"intro2\">Full Stack Developer Intern</div>\n        </div>\n        <div className=\"start-button\">\n          <span>VIEW</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Topbar;\n","import React, { Component } from 'react';\nimport '../css/section.css';\n\nclass Section extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <section>\n        <div>Hi this is test.</div>\n      </section>\n    )\n  }\n}\n\nexport default Section;\n","import React, { Component } from 'react';\nimport '../css/footer.css';\n\nclass Footer extends Component {\n  constructor(props) {\n    super();\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n        </div>\n        <footer>\n          Copyright@ Huang Fu Li Hsiang\n        </footer>\n        \n      </div>\n    )\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Topbar from './topbar';\nimport Section from './section';\nimport Footer from './footer';\nimport '../css/intro.css';\n\nclass Intro extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div>\n        <Topbar />\n        <Section />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Intro;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Intro from './components/intro';\n\nclass App extends Component{\n  constructor(props) {\n    super();\n    const url = window.location.origin;\n\n    if (!url.includes('localhost') && !url.includes('https')) {\n      window.location = `https:${url.split(':')[1]}`;\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <Intro />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // main: '#1976d2'\n      main: '#2196f3'\n    },\n    secondary: {\n      // main: '#DC004E'\n      main: '#b39ddb'\n    }\n  }\n})\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider> ,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}